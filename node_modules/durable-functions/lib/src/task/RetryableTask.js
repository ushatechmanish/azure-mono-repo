"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetryableTask = void 0;
const _1 = require(".");
const NoOpTask_1 = require("./NoOpTask");
const WhenAllTask_1 = require("./WhenAllTask");
const DurableError_1 = require("../error/DurableError");
class RetryableTask extends WhenAllTask_1.WhenAllTask {
    constructor(innerTask, retryOptions) {
        super([innerTask], innerTask.actionObj);
        this.innerTask = innerTask;
        this.retryOptions = retryOptions;
        this.attemptNumber = 1;
        this.isWaitingOnTimer = false;
    }
    trySetValue(child, executor) {
        if (!executor) {
            throw new DurableError_1.DurableError("A framework-internal error was detected: " +
                "No executor passed to RetryableTask.trySetValue. " +
                "A TaskOrchestrationExecutor is required to schedule new tasks. " +
                "If this issue persists, please report it here: " +
                "https://github.com/Azure/azure-functions-durable-js/issues");
        }
        if (this.isWaitingOnTimer) {
            this.isWaitingOnTimer = false;
            if (this.attemptNumber > this.retryOptions.maxNumberOfAttempts) {
                this.setValue(true, this.error);
            }
            else {
                const rescheduledTask = new NoOpTask_1.NoOpTask();
                rescheduledTask.parent = this;
                this.children.push(rescheduledTask);
                executor.trackOpenTask(rescheduledTask);
            }
        }
        else if (child.stateObj === _1.TaskState.Completed) {
            this.setValue(false, child.result);
        }
        else {
            const rescheduledTask = new NoOpTask_1.NoOpTask();
            rescheduledTask.parent = this;
            this.children.push(rescheduledTask);
            executor.trackOpenTask(rescheduledTask);
            this.isWaitingOnTimer = true;
            this.error = child.result;
            this.attemptNumber++;
        }
    }
}
exports.RetryableTask = RetryableTask;
//# sourceMappingURL=RetryableTask.js.map