"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisteredActivityTask = void 0;
const AtomicTask_1 = require("./AtomicTask");
const CallActivityAction_1 = require("../actions/CallActivityAction");
const CallActivityWithRetryAction_1 = require("../actions/CallActivityWithRetryAction");
const RetryableTask_1 = require("./RetryableTask");
class RegisteredActivityTask extends AtomicTask_1.AtomicTask {
    constructor(activityName, input) {
        super(false, new CallActivityAction_1.CallActivityAction(activityName, input));
        this.withRetry = (retryOptions) => {
            if (this.alreadyScheduled) {
                throw new Error("Invalid use of `.withRetry`: attempted to create a retriable task from an already scheduled task. " +
                    `A task with ID ${this.id} to call activity ${activityName} has already been scheduled. ` +
                    "Make sure to only invoke `.withRetry` on tasks that have not previously been yielded.");
            }
            const callActivityWithRetryAction = new CallActivityWithRetryAction_1.CallActivityWithRetryAction(activityName, retryOptions, input);
            const backingTask = new AtomicTask_1.AtomicTask(false, callActivityWithRetryAction);
            return new RetryableTask_1.RetryableTask(backingTask, retryOptions);
        };
    }
}
exports.RegisteredActivityTask = RegisteredActivityTask;
//# sourceMappingURL=RegisteredActivityTask.js.map