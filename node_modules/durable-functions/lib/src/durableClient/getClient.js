"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDurableClientInput = exports.getClient = void 0;
const DurableClient_1 = require("./DurableClient");
const OrchestrationClientInputData_1 = require("./OrchestrationClientInputData");
const cloneDeep = require("lodash/cloneDeep");
const url = require("url");
const validator_1 = require("validator");
const Constants_1 = require("../Constants");
function getClient(context) {
    const foundInput = context.options.extraInputs.find(isDurableClientInput);
    if (!foundInput) {
        throw new Error("Could not find a registered durable client input binding. Check your extraInputs definition when registering your function.");
    }
    const clientInputOptions = foundInput;
    let clientData = getClientData(context, clientInputOptions);
    if (!process.env.WEBSITE_HOSTNAME || process.env.WEBSITE_HOSTNAME.includes("0.0.0.0")) {
        clientData = correctClientData(clientData);
    }
    return new DurableClient_1.DurableClient(clientData);
}
exports.getClient = getClient;
function isDurableClientInput(input) {
    return input.type === "durableClient" || input.type === "orchestrationClient";
}
exports.isDurableClientInput = isDurableClientInput;
function getClientData(context, clientInput) {
    const clientData = context.extraInputs.get(clientInput);
    if (clientData && OrchestrationClientInputData_1.OrchestrationClientInputData.isOrchestrationClientInputData(clientData)) {
        return clientData;
    }
    throw new Error("Received input is not a valid durable client input. Check your extraInputs definition when registering your function.");
}
function correctClientData(clientData) {
    const returnValue = cloneDeep(clientData);
    returnValue.creationUrls = correctUrls(clientData.creationUrls);
    returnValue.managementUrls = correctUrls(clientData.managementUrls);
    return returnValue;
}
function correctUrls(obj) {
    const returnValue = cloneDeep(obj);
    const keys = Object.getOwnPropertyNames(obj);
    keys.forEach((key) => {
        const value = obj[key];
        if ((0, validator_1.isURL)(value, {
            protocols: ["http", "https"],
            require_tld: false,
            require_protocol: true,
        })) {
            const valueAsUrl = new url.URL(value);
            returnValue[key] = value.replace(valueAsUrl.origin, Constants_1.Constants.DefaultLocalOrigin);
        }
    });
    return returnValue;
}
//# sourceMappingURL=getClient.js.map