"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generic = exports.cosmosDB = exports.eventGrid = exports.eventHub = exports.serviceBusTopic = exports.serviceBusQueue = exports.storageQueue = exports.storageBlob = exports.timer = exports.http = void 0;
const input = require("./input");
const functions_1 = require("@azure/functions");
const getClient_1 = require("./durableClient/getClient");
function http(functionName, options) {
    addClientInput(options);
    functions_1.app.http(functionName, Object.assign(Object.assign({}, options), { handler: convertToFunctionHandler(options.handler) }));
}
exports.http = http;
function timer(functionName, options) {
    addClientInput(options);
    functions_1.app.timer(functionName, Object.assign(Object.assign({}, options), { handler: convertToFunctionHandler(options.handler) }));
}
exports.timer = timer;
function storageBlob(functionName, options) {
    addClientInput(options);
    functions_1.app.storageBlob(functionName, Object.assign(Object.assign({}, options), { handler: convertToFunctionHandler(options.handler) }));
}
exports.storageBlob = storageBlob;
function storageQueue(functionName, options) {
    addClientInput(options);
    functions_1.app.storageQueue(functionName, Object.assign(Object.assign({}, options), { handler: convertToFunctionHandler(options.handler) }));
}
exports.storageQueue = storageQueue;
function serviceBusQueue(functionName, options) {
    addClientInput(options);
    functions_1.app.serviceBusQueue(functionName, Object.assign(Object.assign({}, options), { handler: convertToFunctionHandler(options.handler) }));
}
exports.serviceBusQueue = serviceBusQueue;
function serviceBusTopic(functionName, options) {
    addClientInput(options);
    functions_1.app.serviceBusTopic(functionName, Object.assign(Object.assign({}, options), { handler: convertToFunctionHandler(options.handler) }));
}
exports.serviceBusTopic = serviceBusTopic;
function eventHub(functionName, options) {
    addClientInput(options);
    functions_1.app.eventHub(functionName, Object.assign(Object.assign({}, options), { handler: convertToFunctionHandler(options.handler) }));
}
exports.eventHub = eventHub;
function eventGrid(functionName, options) {
    addClientInput(options);
    functions_1.app.eventGrid(functionName, Object.assign(Object.assign({}, options), { handler: convertToFunctionHandler(options.handler) }));
}
exports.eventGrid = eventGrid;
function cosmosDB(functionName, options) {
    addClientInput(options);
    functions_1.app.cosmosDB(functionName, Object.assign(Object.assign({}, options), { handler: convertToFunctionHandler(options.handler) }));
}
exports.cosmosDB = cosmosDB;
function generic(functionName, options) {
    addClientInput(options);
    functions_1.app.generic(functionName, Object.assign(Object.assign({}, options), { handler: convertToFunctionHandler(options.handler) }));
}
exports.generic = generic;
function addClientInput(options) {
    var _a;
    options.extraInputs = (_a = options.extraInputs) !== null && _a !== void 0 ? _a : [];
    if (!options.extraInputs.find(getClient_1.isDurableClientInput)) {
        options.extraInputs.push(input.durableClient());
    }
}
function convertToFunctionHandler(clientHandler) {
    return (trigger, context) => {
        const client = (0, getClient_1.getClient)(context);
        return clientHandler(trigger, client, context);
    };
}
//# sourceMappingURL=client.js.map